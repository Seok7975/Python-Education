# -*- coding: utf-8 -*-
"""
# Section 2. N차원 배열의 인덱싱
---
"""
import numpy as np

"""###**2-1. 배열의 index 접근하기**"""

# 1차원 배열 인덱스 접근하기 - 배열의 몇번째 값이 뭔지 혹은 특정 범위의 갑싱 어더한 것이 있는 탐색하는 과정
# arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
arr = np.arange(10)
print(arr)
# 점근하기
print(arr[3]) # 인덱스 3의 값
print(arr[1])
# print(arr[10]) # 존재하지 않으므로 에러남.
print(arr[-1]) # 뒤로 돌아가므로 9가 나옴.
print(arr[-10]) # 자기자신이 출력됨.

# 1차원 배열에서 범위 값 탐색하기
arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
print(arr[3:8]) # 3부터 8미만까지 출력됨
print(arr[3:]) # 3부터 모든 원소 출력
print(arr[:7]) # 7미만까지의 모든 값 출력
print(arr[:-1]) # 9 미만까지의 모든 값 출력

# 2차원 배열 인덱스 접근하기
arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12]])
print(arr, arr.shape, arr.ndim)  # 3X4 배열이고 2차원 배열이다
# 접근하기
print(arr[0][3])  # 4

# 2차원 배열에서 범위 값 탐색하기
arr = np.array([[1, 2, 3, 4],
                [5, 6, 7, 8],
                [9, 10, 11, 12]])
print(arr[0, :])  # 0번째행의 모든 열의 값
print(arr[:,1]) # 1번째 열의 값 출력
print(arr[:3, :]) # 0부터 3미만의 행에서 모든 열의 값. 즉 모든 값
print(arr[:2, 2:]) # 0부터 2미만의 행에서 2열부터 마지막 열까지의 값 출력

"""###**2-2. 배열의 Fancy 인덱싱**
- 특정 인덱스 여러 개를 선택을 해서 탐색하는 방법
"""

# 1차원 배열에서의 Fancy 인덱싱
arr = np.array([5, 10, 15, 20, 25, 30])
print(arr[[0, 2, 4]])  # 0 , 2 , 4번째 원소를 가져오겠다는 것.

# 2차원 배열에서의 Fancy 인덱싱
arr = np.array([[5, 10, 15, 20],
               [25, 30, 35, 40],
               [45, 50, 55, 60]])
print(arr[[0, 2], 2:]) # 0행과 2행에 해당하는 값중에서 2열부터 끝까지 값을 구하라
print(arr[1:, [2, 3]]) # 1행부터 끝까지 해당하는 값에서 2열과 3열에 해당하는 값을 구하다.

"""###**2-3. 배열의 Boolean 인덱싱**
- true와 false 값으로 배열의 값을 탐색
"""

# Boolean 값을 이용한 배열 인덱싱
arr = np.array([1, 2, 3, 4])
print(arr[[True, False, True, True]]) # True에 해당하는 값만 가져온다.

arr = np.array([[1, 2, 3, 4],
               [5, 6, 7, 8]])
print(arr[[True, False], True])  # 0행에 모든 열에대한 값은 다 가져온다.

# 조건 연산자를 활용하여 조건에 맞는 배열의 값만 출력하기
arr = np.array([[1, 2, 3, 4],
               [5, 6, 7, 8]])
print(arr[arr>3])  # 3 보다 큰수를 가져온다.
print(arr[arr <= 2])  # 2의 이하 값을 가져온다